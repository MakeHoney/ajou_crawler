<장학>
http://www.ajou.ac.kr/new/ajou/notice.jsp?mode=list&search%3Asearch_category%3Acategory=77&board_no=33&pager.offset=0
페이지 (장학 공지사항 첫페이지)를 인자로,
"끝"버튼에 달린 url을 크롤링하여 변수에 저장한다. (var1 = url)
해당 url를 적절히 파싱한 후에 url의 마지막 번호 (ex. offset=760)를 변수에 저장한다.(var2 = 760)
var1을 인자로 해당 페이지(게시판의 마지막페이지)를 크롤링하여, 마지막 페이지의 게시글의 수를 알아낸 뒤에 변수에 저장한다.
(var3 = 게시글의 수)
var4 = var2 + var3 연산을 통해 var4는 게시글의 총 개수가 된다.
(totalNum = var4)


유저 개개인의 특정변수에 유저가 쿼리를 보낸 '당시'의 총 게시물 수를 저장한다
(user4Total = 754)
(유저가 쿼리를 보낼 때 마다 유저 변수에 최신 총 게시물 수를 저장하는 것이 전제되어야 위와 같은 로직이 가능하다.)
현시점의 총 게시물이 763개라면 (totalNum = 763) totalNum - user4Total을 통해서 업데이트된 게시물의 개수를 얻어온다.
(updateNum = totalNum - user4Total = 763 - 754 = 9)
위 예시의 경우 유저에게 총 9건의 새로운 공지가 올라왔다고 알려줄 수 있다.
(카카오 API와 연동하여 사용해보자)

* 우리학교 공지사항의 경우 웬일인지 친절(?)하게 공지사항의 총 건수가 페이지에 명시되어있다. 따라서 이러한 알고리즘이 굳이 필요 없어보일 수도 있으나 그렇지 않은 수많은 웹페이지의 경우에는 위와 비슷한 접근 또는 다른 방식의 접근이 필요하다. 즉 크롤러의 이식성을 높이거나, 조금이라도 동적인 애플리케이션을 구성하기 위해서 위 방식은 의미가 있다고 본다.

2018.04.06 03:43AM 확통퀴즈준비를하며.... 딴짓하다 떠오름
